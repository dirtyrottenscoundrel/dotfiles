#+TITLE: John Guidry's Emacs Configuration
#+AUTHOR: John Guidry


* Usage

** Commentary

Any variables, functions, or macros defined in this configuration
are "namespaced" with a prefix of ~tvjg/~. This is only a convention
for easily distinguishing between built-in functions and those
defined in this configuration or another package, and has no other
special significance.


* Emacs Initialization

** Package Sources

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/"))

  (add-to-list 'package-archives
               '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/") t)

  (package-initialize)
  (when (not package-archive-contents)
      (package-refresh-contents))
#+END_SRC

** Vendor Path

Keep any Elisp files not installed from a package repository in the
=vendor/= directory:

#+NAME: init-before
#+BEGIN_SRC emacs-lisp
  ;; TODO: Load vendor subdirectories
  (defvar tvjg/vendor-directory (concat user-emacs-directory "vendor/use-package"))
  (add-to-list `load-path tvjg/vendor-directory)
#+END_SRC

** Configuring Packages

We use [[https://github.com/jwiegley/use-package][use-package]] to autoload packages. It provides a DSL for
setting up autoloads and keybindings, and for deferring the loading
of packages that might otherwise slow down Emacs's startup.

#+NAME: init-before
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'use-package))
  (require 'bind-key)
#+END_SRC


* General

** Better Defaults

#+BEGIN_SRC emacs-lisp
  (use-package better-defaults
    :ensure t)
#+END_SRC

** Diminish

#+BEGIN_SRC emacs-lisp
  (use-package diminish :ensure t)
#+END_SRC
** Temporary Files

Keep temporary files in a separate directory:

#+NAME: init-before
#+BEGIN_SRC emacs-lisp
  (defvar tvjg/ephemeral-directory "~/.emacs.tmp/")
  (unless (file-exists-p tvjg/ephemeral-directory)
    (mkdir tvjg/ephemeral-directory))
#+END_SRC

Autosave and backup files (currently disabled) go in =/tmp/=.

#+NAME: init-after
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
  (setq make-backup-files nil)
#+END_SRC

Keep Eshell's temporary files out of the way:

#+NAME: init-after
#+BEGIN_SRC emacs-lisp
  (setq eshell-directory-name (expand-file-name "eshell/" tvjg/ephemeral-directory))
#+END_SRC

** Exec Path

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
   :ensure t
   :config
   (progn
     (when (memq window-system '(mac ns))
       (exec-path-from-shell-initialize))))
#+END_SRC
** Custom

Set alternative location for =custom-set-variables= and =custom-set-faces=:

#+NAME: init-after
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file 'noerror)
#+END_SRC


* Themes

#+BEGIN_SRC emacs-lisp
   ;(use-package cyberpunk-theme :ensure t)
   (use-package base16-theme
     :ensure t
     :init (load-theme 'base16-ocean-dark t))
#+END_SRC


* Editing

** Line Numbers

#+BEGIN_SRC emacs-lisp
  (use-package relative-line-numbers
    :ensure t
    :config
    (progn
      (line-number-mode t)
      (column-number-mode t)

      (setq relative-line-numbers-format #'padded-line-numbers)

      (defun padded-line-numbers (offset)
        (format "%2d " (abs offset)))))
#+END_SRC

** Emmet

#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    (progn
      (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
      (add-hook 'css-mode-hook  'emmet-mode)))
#+END_SRC
   

* Navigation and Completion

** Find in Project

[[https://github.com/bbatsov/projectile][Projectile]] allows easy switching between projects as well as
finding files and buffers related to the current project.

Projectile's bindings start with =C-c p=.

#+NAME: navigation-completion
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (progn
      (add-to-list 'projectile-globally-ignored-files ".DS_Store") ; FIXME: Only works for file in root
      (projectile-global-mode)))
#+END_SRC
** Ido

#+NAME: navigation-completion
#+BEGIN_SRC emacs-lisp
  (use-package flx-ido
    :ensure t
    :init
    (progn
      (setq ido-save-directory-list-file (expand-file-name "ido.last" tvjg/ephemeral-directory))
    :config
    (progn
      (ido-everywhere t)
      (flx-ido-mode t))

      (setq ido-enable-flex-matching t)
      (add-to-list 'ido-ignore-files "\\.DS_Store")))
#+END_SRC

** Tramp

#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC

** Guide Key

#+BEGIN_SRC emacs-lisp
    (use-package guide-key
      :ensure t
      :config
      (progn
        (setq guide-key/guide-key-sequence
              '("C-c"
                "C-h"
                "C-w"
                "C-u"
                "C-x"))
        (setq guide-key/recursive-key-sequence-flag t)
        (setq guide-key/popup-window-position 'bottom)
        (guide-key-mode t)))
#+END_SRC


* Version Control

** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t)
#+END_SRC


* Language Support

** Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :config
    (progn
      (autoload 'markdown-mode "markdown-mode"
        "Major mode for editing Markdown files" t)
      
      (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
      (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
      (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))))
#+END_SRC

** Sass

#+BEGIN_SRC emacs-lisp
  (use-package scss-mode
    :ensure t
    :config (progn (setq scss-compile-at-save nil)))
#+END_SRC 
** Clojure

#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t
    :config
    (progn
      (use-package cider :ensure t :pin melpa-stable)
      
      (use-package paredit
        :ensure t
        :config
        (progn
          (add-hook 'clojure-mode-hook 'paredit-mode)
          (add-hook 'cider-repl-mode-hook 'paredit-mode)))

      (use-package company
        :ensure t
        :config
        (progn
          (add-hook 'clojure-mode-hook 'company-mode)
          (add-hook 'cider-repl-mode-hook 'company-mode)))
      
      (use-package rainbow-delimiters
        :ensure t
        :config
        (progn
          (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
          (add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)))

      (add-to-list 'auto-mode-alist '("\\.boot\\'" . clojure-mode))))
#+END_SRC

** Javascript

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :config
    (progn
      (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

      (setq js2-highlight-level 3)

      ;; Use plain old js-mode for JSON, js2-mode doth protest too much
      ;; https://github.com/bodil/emacs.d/blob/133386b9cc773377b36fce990d17367438a8916a/bodil/bodil-js.el#L38
      (add-to-list 'auto-mode-alist '("\\.json$" . js-mode))))
#+END_SRC


* Key Bindings

** Evil

Evil mode is a minor mode providing Vim emulation for Emacs. It
reproduces Vim's modal editing and even certain Ex commands.

Evil Leader mode provides something like Vim's =<Leader>=, which is
set to =SPC= below. Here are the conventions used throughout the
configuration around "namespacing" sets of commands bound to the
leader key:

| Key | Description                 |
|-----+-----------------------------|
| =g= | Git functions (via Magit)   |
| =h= | Helm commands               |
| =o= | Option (minor-mode) toggles |
| =r= | Global Org mode functions   |

(Evil Leader mode has to be initialized before Evil mode to work
around [[https://github.com/cofi/evil-leader/issues/10][a limitation]].)

#+NAME: evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (progn
      (use-package evil-leader
        :ensure t
        :config
        (progn
          (setq evil-leader/in-all-states t)
          (evil-leader/set-leader ",")
          (global-evil-leader-mode t)
          
          (evil-leader/set-key
            "b" 'switch-to-buffer
            "f" 'find-file
            "," 'evil-repeat-find-char-reverse))))
    :config
    (progn
      (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
      (define-key evil-visual-state-map (kbd "C-u") 'evil-scroll)
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

      (setq evil-emacs-state-cursor '("red" box))
      (setq evil-normal-state-cursor '("green" box))
      (setq evil-visual-state-cursor '("orange" box))
      (setq evil-insert-state-cursor '("red" bar))
      (setq evil-replace-state-cursor '("red" bar))
      (setq evil-operator-state-cursor '("red" hollow))
      
      (setq evil-default-state 'emacs)
      (evil-mode)))

  (use-package evil-surround
    :ensure t
    :requires 'evil
    :config (progn (global-evil-surround-mode t)))

  (use-package evil-visualstar
    :ensure t
    :requires 'evil
    :config (progn (global-evil-visualstar-mode t)))

  (use-package evil-commentary
    :ensure t
    :requires 'evil
    :diminish evil-commentary-mode
    :config (progn (evil-commentary-mode t)))

  (use-package evil-matchit
    :ensure t
    :requires 'evil
    :config (progn (global-evil-matchit-mode t)))
#+END_SRC


* Org Mode

#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (progn
      (setq org-src-fontify-natively t)))
#+END_SRC
